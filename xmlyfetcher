#!/bin/bash
#
# Copyright (C) 2014 Wenva <lvyexuwenfa100@126.com>
# 
# Permission is hereby granted, free of charge, to any person obtaining a copy
# of this software and associated documentation files (the "Software"), to deal
# in the Software without restriction, including without limitation the rights
# to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
# copies of the Software, and to permit persons to whom the Software is furnished
# to do so, subject to the following conditions:
# 
# The above copyright notice and this permission notice shall be included in all
# copies or substantial portions of the Software.
# 
# THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
# IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
# FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
# AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
# LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
# OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
# THE SOFTWARE.

spushd() {
     pushd "$1" 2>&1> /dev/null
}

spopd() {
     popd 2>&1> /dev/null
}

info() {
     local green="\033[1;32m"
     local normal="\033[0m"
     echo -e "[${green}INFO${normal}] $1"
}

cmdcheck() {
    command -v $1>/dev/null 2>&1 || { error >&2 "Please install command $1 first."; exit 1; }   
}

error() {
     local red="\033[1;31m"
     local normal="\033[0m"
     echo -e "[${red}ERROR${normal}] $1"
}

curdir() {
    if [ ${0:0:1} = '/' ] || [ ${0:0:1} = '~' ]; then
        echo "$(dirname $0)"
    elif [ -L $0 ];then
        name=`readlink $0`
        echo $(dirname $name)
    else
        echo "`pwd`/$(dirname $0)"
    fi
}

myos() {
    echo `uname|tr "[:upper:]" "[:lower:]"`
}

#########################################
###           GROBLE DEFINE           ###
#########################################

VERSION=1.0.1
AUTHOR=smallmuou

#########################################
###             ARG PARSER            ###
#########################################

usage() {

prog=`basename $0`

cat << EOF
$prog version $VERSION by $AUTHOR

USAGE: $prog [OPTIONS] albumUrl / [trackId ... ]

DESCRIPTION:
    This tool is used to download songs under ximalaya.com. It can download album or single song.
   
    1. How to get albumUrl?
        Go to http://www.ximalaya.com and click a album, it will appear at url address bar, 
        like http://www.ximalaya.com/96246993/album/13774123/.
    2. How to get trackId?
        Go to http://www.ximalaya.com and click a song, it will appear at url address bar, 
        like http://www.ximalaya.com/96246993/sound/76515823/. The 76515823 is the trackId.

OPTIONS:
    -h      Show this help message and exit.
    -o      Assign output directory, if not assign, it will download current directory.

EXAMPLES:
    $prog http://www.ximalaya.com/10553948/album/260744/        - download all page of this album
    $prog http://www.ximalaya.com/10553948/album/260744/p2/     - only download page2
    $prog 76515823
    $prog -o ~/Downloads http://www.ximalaya.com/10553948/album/260744/

EOF
exit 1
}

# output set current directory
dst_dir=.

while getopts 'o:h' arg; do
    case $arg in
        h)
            usage
            ;;
        o)
           dst_dir=$OPTARG 
            ;;
        ?)
            usage
            ;;
    esac
done

shift $(($OPTIND - 1))

[ ! -d $dst_dir ] && { error "The output directory $dst_dir does not exist."; exit -1; }

#########################################
###            MAIN ENTRY             ###
#########################################

cmdcheck jshon

fetch() {
    result=`curl -s "http://mobile.ximalaya.com/v1/track/baseInfo?device=iPhone&trackId=$1"|grep title`
    if [ -n "$result" ];then
        uid=`echo $result|jshon -e uid|sed 's/\"//g'`
        title=`echo $result|jshon -e title|sed 's/\"//g'`
        id=`echo $result|jshon -e trackId|sed 's/\"//g'`
        url64=`echo $result|jshon -e playUrl64|sed 's/\"//g'|sed 's/\\\//g'`

        info "Fetch $id $title ..."
        if [ -n "$url64" ];then
            wget "$url64" -O "$dst_dir/$title.mp3"
        fi
    else 
        error "The albumUrl or trackId does not exist."
    fi
}

if [ "${1:0:4}" == "http" ];then
    # ids=`curl -s $1 |awk -F\" '/sound_ids/{print $4}'|sed 's/,/ /g'`

    # append / to url
    url=$1
    [ -z "`echo -n $url|sed -n '/\/$/p'`" ] && url="$url/"

    # fix on 2018.8.14
    # check if contain page
    assign_page=`echo -n $1|sed -n '/.*\/p[0-9]\{1,\}/p'`
    if [ -n "$assign_page" ];then
        ids=`curl -s $url|sed -n 's/.*AlbumDetailTrackList":\(.*\)};<\/script>.*$/\1/p'|tr t '\n'|awk -F[:,] '/^rackId/{print $2}'`
    else
        tracks_info=`curl -s $url|sed -n 's/.*AlbumDetailTrackList":\(.*\)};<\/script>.*$/\1/p'|jshon -e tracksInfo`
        total=`echo $tracks_info|jshon -e trackTotalCount`
        page_size=`echo $tracks_info|jshon -e pageSize`
        page_count=`expr $total / $page_size`
        [ `expr $total % $page_size` -ne 0 ]&&let page_count++;

        for((i=1;i<=$page_count;i++));
        do 
            info "Parse page ${i}/${page_count} ..."
            ids="$ids `curl -s "${url}p${i}/"|sed -n 's/.*AlbumDetailTrackList":\(.*\)};<\/script>.*$/\1/p'|tr t '\n'|awk -F[:,] '/^rackId/{print $2}'`"
        done
    fi
else 
    [ $# -eq 0 ] && usage
    ids=$@
fi

info "Contain `echo $ids|wc -w|sed 's/^ *//g'` track(s), start fetch ..."
for id in $ids
do
    fetch $id
done

